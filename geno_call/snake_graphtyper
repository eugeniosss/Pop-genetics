import math


COORDS_FILE=""
BAMS=""
REF=""
OUT_PREFIX=""
POP_SCRIPTS=""

DIC={}
BATCH_SIZE = 500  # Number of VCFs per batch

with open(COORDS_FILE, "r") as file:
    for idx, line in enumerate(file, start=1):
        values = line.strip().split()
        DIC[idx] = values[0]+":"+values[1]+"-"+values[2]

# Calculate total number of batches
TOTAL_BATCHES = math.ceil(len(DIC) / BATCH_SIZE)

BATCHES = {
    f"batch_{i + 1}": [
        ENTRY for ENTRY in DIC.keys() if (ENTRY - 1) // BATCH_SIZE == i
    ]
    for i in range(TOTAL_BATCHES)
}

def get_region(entry):
    return DIC[entry]

rule all:
    input:
           OUT_PREFIX+".vcf.gz.tbi",

rule geno_call_with_graphtyper:
    input:
        reference=REF,
    output:
       temporary("tmp/{ENTRY}.vcf")
    log:
        "tmp/{ENTRY}.log"
    conda:
        POP_SCRIPTS + "geno_callers_env.yml"
    threads: 1
    params:
        region=lambda wildcards: DIC[int(wildcards.ENTRY)]
    shell:
        "graphtyper genotype {input.reference} --sams={BAMS} --region={params.region} --threads=1 --output={wildcards.ENTRY} && bcftools concat -o {output} {wildcards.ENTRY}/*/*.vcf.gz && rm -r {wildcards.ENTRY}"    

rule batch_merge:
    input:
        lambda wildcards: expand("tmp/{ENTRY}.vcf", ENTRY=BATCHES[wildcards.batch])
    output:
        temporary("tmp_batches/{batch}.vcf")
    log:
        "tmp_batches/{batch}.log"
    threads: 1
    shell:
        """
        bcftools concat -o {output} {input} > {log} 2>&1
        """

rule final_merge:
    input:
        expand("tmp_batches/{batch}.vcf", batch=BATCHES.keys())
    output:
       temporary( OUT_PREFIX+".vcf")
    log:
        "final_merge.log"
    threads: 1
    shell:
        """
        bcftools concat -o {output} {input} > {log} 2>&1
        """

rule zip_vcf:
    input:
        OUT_PREFIX+".vcf"
    output:
        OUT_PREFIX+".vcf.gz"
    log:
        "zip.log"
    threads: 1
    shell:
        """
        (bgzip -c {input} > {output}) > {log} 2>&1
        """

rule index_vcf_gz:
    input:
        OUT_PREFIX+".vcf.gz"
    output:
        OUT_PREFIX+".vcf.gz.tbi"
    threads: 1
    log:
        "index.log"
    conda:
        POP_SCRIPTS + "geno_callers_env.yml"
    shell:
        """
        tabix {input} > {log} 2>&1
        """
